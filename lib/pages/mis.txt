 //signup user
  Future<void> registerWithEmailAndPassword(BuildContext context) async {
    try {
      if (passController.text == confirmController.text) {
        //this will create the id in authetication this n creation of doucment v need to happend after verifcation
        UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: emailController.text,
          password: passController.text,
        );

        // Create a new document for the user in the 'users' collection
        //this doucment creation is used for chatapp
        await _firestore.collection('users').doc(userCredential.user!.uid).set({
          'uid': userCredential.user!.uid,
          'email': emailController.text, // Fixed typo in 'email'
        }, SetOptions(merge: true));

        Get.to(() => EmailVerificationScreen(userEmail: emailController.text));
      } else {
        Get.snackbar('', 'Passwords do not match...');
      }
    } catch (error) {
      print('Error registering user: $error');
      // Display an error message to the user.

      // Check if the error message indicates that the user is already registered
      if (error.toString().contains('email-already-in-use')) {
        // Show a Snackbar indicating that the user is already registered
        Get.snackbar('Invalid', 'User is already registered. Click below to login Now.');
      } else {
        // Show a generic error Snackbar
        Get.snackbar('Error', 'Registration failed. Please try again later.');
      }
    }
  }


  //loginwithgoogle
    Future<void> signInWithGoogle(BuildContext context) async {
      try {
        UserCredential? userCredential = await _authService.signInWithGoogle();
        if (userCredential != null) {
          // // Create a new document for the user in the 'users' collection
          // await FirebaseFirestore.instance.collection('users').doc(userCredential.user!.uid).set({
          //   'uid': userCredential.user!.uid,
          //   'email': userCredential.user!.email,
          //   // Add other user details as needed
          // });
          Get.snackbar('Success', 'Sign in with Google successful');
          // Navigate to the next screen upon successful sign-in.
          Get.offAll(() => HomePage());
        }
      } catch (error) {
        Get.snackbar('Error', 'Error signing in with Google: $error');
      } finally {
        loading.value = false;
      }
    }



    Future<void> signInWithGoogle(BuildContext context) async {
        Get.snackbar('Message', 'Under Maintence');
        // try {
        //   GoogleSignInAccount? googleSignInAccount = await _authService.signInWithGoogle();
        //   print('gmail signin');
        //   if (googleSignInAccount != null) {
        //     print('user is signed through gmail ');
        //     String userEmail = googleSignInAccount.email ?? '';
        //
        //     print('User signed in with Google. Email: $userEmail');
        //
        //     DocumentSnapshot userDocSnapshot = await _firestore.collection('usersDetails').doc(userEmail).get();
        //
        //     if (!userDocSnapshot.exists) {
        //       await _firestore.collection('usersDetails').doc(userEmail).set({
        //         'id': userEmail,
        //         'userDetailsfilled': false,
        //       });
        //       print('User document created for $userEmail');
        //     }
        //
        //     bool userDetailsfilled = await getUserDetailsFilled(userEmail);
        //
        //     if (userDetailsfilled == true) {
        //       // print('Homepage');
        //       // Get.offAll(() => HomePage());
        //     } else {
        //       print('Userdetails');
        //       Get.to(() => UserDetails(userEmail: userEmail));
        //     }
        //   } else {
        //     Get.snackbar('Error', 'Failed to sign in with Google.');
        //   }
        // } catch (error) {
        //   Get.snackbar('Error', 'Error signing in with Google: $error');
        // } finally {
        //   loading.value = false;
        // }
      }


                // Positioned(
                //   bottom: 0,
                //   left: 0,
                //   right: 0,
                //   child: Container(
                //     width: MediaQuery.of(context).size.width,
                //     height: 60,
                //     decoration: BoxDecoration(
                //       color: Colors.grey,
                //       borderRadius: BorderRadius.circular(15),
                //     ),
                //     child: Center(
                //       child: Text(
                //         'Ad',
                //         style: TextStyle(color: Colors.grey.shade50, fontSize: 12),
                //       ),
                //     ),
                //   ),
                // ),