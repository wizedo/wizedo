plugins {
    id "com.android.application"
    id "kotlin-android"
    id 'com.google.gms.google-services'

    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.scanpick.peermatee"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.scanpick.peermatee"
//        minSdk = flutter.minSdkVersion
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled = true // Enabling multidex
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            //minifyEnabled flag is used to enable code shrinking, which reduces the size of the APK by removing unused code and resources.
            minifyEnabled true
            //proguardFiles command specifies the ProGuard configuration files to use when shrinking and obfuscating your code.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Configuring multidex
    configurations.all {
        //later if safetynet below code is not working then do that
//        exclude group: 'com.google.android.gms', module: 'play-services-safetynet'
        resolutionStrategy {
            force 'com.android.support:multidex:1.0.3'
//            force 'androidx.work:work-runtime:2.6.0'
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.5.0') // Firebase BOM
    implementation 'com.google.firebase:firebase-analytics-ktx' // Firebase Analytics
    implementation 'androidx.multidex:multidex:2.0.1' // Multidex library
    implementation 'com.google.android.gms:play-services-safetynet:18.1.0'
//    implementation 'androidx.work:work-runtime-ktx:2.7.0'
}

// Apply the Google services Gradle plugin
apply plugin: 'com.google.gms.google-services'
